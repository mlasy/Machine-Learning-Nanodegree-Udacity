import random
from random import randrange
import math
import time
import numpy as np
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator



class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
       
        self.trial = 1
        

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0

        ## linear decreasing epsilon
        # if self.epsilon > 0:
        #    self.epsilon = self.epsilon -0.003

        #asymptotic decreasing epsilon
        # if self.epsilon > 0:
        #     self.epsilon = 1/(0.1*math.pow(self.trial,1.001))

        # using the exponential function
        if self.epsilon >0:
            self.epsilon = math.exp(-(0.008*self.alpha*self.trial))
            
            

        
        #counter for trials
        self.trial +=1

        if testing == True:
            self.epsilon = 0
            self.alpha = 0
        


      

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """
        #print "build state init"
        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent        
        state = (waypoint, inputs['light'], inputs['left'], inputs['oncoming'],  inputs['right'])

        return state


    def get_max_Q(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        #print "get_max_Q init"    
        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        #print "get_max_Q says current self.state", state
        #print "get_max_Q says current QDict", self.Q
        maxQ = max(self.Q[state].values())
        #print "get_max_Q found this in Qdict", self.Q[state]
        #maxQ = max(self.Q[state], key=self.Q[state].get)
        #print "maximum Q-Value is: ", maxQ
        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """
        #print "createQ init"
        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0

        if self.learning == True:
            if self.Q.has_key(state) == False:
                self.Q[state]={key: 0 for key in self.valid_actions}

                #print "createQ: is state in Qdict? ", self.Q.has_key(state)
                #print "CreateQ, the state i'm in is: ", state," i created ",  self.Q[state], " with the keys ", self.Q[state].keys()
            #else:
                #print "createQ: ", state, " is already in Qdict "
                #print "createQ: here you can see self.Q ", self.Q
                #print "createQ: is state in Qdict? ", self.Q.has_key(state)
                #print "createQ: here you can see self.Q.keys() ", self.Q.keys()
                #print "createQQ found this in Qdict", self.Q[state]
        #else:
            #print " self.learning is disabled"
        # if self.learning==True and self.state not in self.Q.keys():
        #         self.Q[state]={key: 0 for key in self.valid_actions}
        #         print "CreateQ, the state i'm in is: ", self.state," i created ",  self.Q[state], " with the keys ", self.Q[state].keys()
        #### Only for debugging
        # self.debug_var = self.debug_var +1
        # if self.debug_var > 10:
        #      quit()


        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """
        # print "choose_action init"
        # #Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = None
        action = random.choice(self.valid_actions)
        # ########### 
        # ## TO DO ##
        # ###########
        # # When not learning, choose a random action
        # # When learning, choose a random action with 'epsilon' probability
        # #   Otherwise, choose an action with the highest Q-value for the current state

        if self.learning == False:
            #print "self.learning is false, so i choose_action", action
            return action
        if self.learning == True and random.randint(0,100) < self.epsilon*100:
            #print "self.learning is true, still i chose a random action", action
            return action
        else:
            #action = self.valid_actions[self.get_max_Q(self.state)]
            action = self.get_max_Q(state)
            #time.sleep( 0.5)
            #test= max(self.Q[state], key=action)
            #print "so why dont we choose", self.Q[state].keys()[self.Q[state].values().index(action)]
            #print "got the maxQ and the action I'm about to take is: ", test

            #if duplicates (list is hashable) , randint has to find the maximum q value. if no zero value found (i.e. non-zero duplicate) just proceed
            # this issue is not solved in the most elegant manner, but works well for this case
            if len(self.Q[state].values()) != len(set(self.Q[state].values())):                                                                             
                randind = randrange(0,len(state)-1)
                while self.Q[state].values()[randind] != self.get_max_Q(state):
                        randind = randrange(0,len(state)-1)
                print "randind out of while", randind
                action = self.Q[state].keys()[randind]
            else:
                action = self.Q[state].keys()[self.Q[state].values().index(action)]

            return action
        return 



    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """
        #print "learn init"    
        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')

        if self.learning==True and state in self.Q.keys():
                 self.Q[state][action] += self.alpha*(reward-self.Q[state][action])

        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """
        #print "update init"    
        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn
        print self.trial
        print "self.learning is ", self.learning , " and self.epsilon is ", self.epsilon
        return
        

def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose = True)
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, alpha = 0.3)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay = 0.01, log_metrics = True, display = True, optimized = True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test = 10, tolerance = 0.03)


if __name__ == '__main__':
    run()
